#!/bin/bash

# Import configuration values from the config file
POLKACLI_PATH="$HOME/.config/polkacli"
POLKACLI_COMPLETION="$POLKACLI_PATH/completion"
POLKACLI_CONFIG="$POLKACLI_PATH/config"
POLKACLI_LOGO="$POLKACLI_PATH/logo.ansi"
POLKACLI_USAGE="$POLKACLI_PATH/usage"
POLKACLI_VERSION="0.2.0"
source "$POLKACLI_COMPLETION"
source "$POLKACLI_CONFIG"
source "$POLKACLI_USAGE"

# Functions
function client() {
  case "$1" in
    "version")
      local version
      version=$(polkadot --version)
      echo "$version"
      ;;
    "download")
      local latest_version
      latest_version=$(curl -s https://api.github.com/repos/paritytech/polkadot/releases/latest | jq -r '.tag_name')
      local latest_url
      latest_url=$(curl -s https://api.github.com/repos/paritytech/polkadot/releases/latest | jq -r '.assets[] | select(.name | endswith("polkadot")) | .browser_download_url')
      local download_path
      download_path="$HOME/polkadot-$latest_version"

      echo "Downloading polkadot v$latest_version"
      sudo curl -L -o "$download_path" "$latest_url"
      sudo chmod +x "$download_path"
      polkadot --version
      ;;
    "update")
      local polkadot_path="/usr/local/bin/polkadot"
      local latest_version
      latest_version=$(curl -s https://api.github.com/repos/paritytech/polkadot/releases/latest | jq -r '.tag_name')
      local download_path
      download_path="$HOME/polkadot-$latest_version"

      if sudo systemctl stop "$NETWORK.service"; then
        sudo mv "$polkadot_path" "$polkadot_path.bak"
        sudo ln -s "$download_path" "$polkadot_path"
        sudo systemctl start "$NETWORK.service"
      fi
      ;;
    *)
      echo "Usage: polkacli client [version|download|update]"
      exit 1
      ;;
  esac
}

function get_config_value() {
  local key="$1"
  local regex="^$key=.*$"

  # Read the config file line by line and check if it matches the config key
  while read -r line; do
    if [[ $line =~ $regex ]]; then
      # Print the option value
      echo "${line/$key=/}"
      return 0
    fi
  done < "$POLKACLI_CONFIG"

  # Config key not found, return error
  return 1
}

function set_config_value() {
  local key="$1"
  local value="$2"
  local file="$POLKACLI_CONFIG"

  # Escape slashes in value to prevent issues with sed
  value=$(echo "$value" | sed 's/\//\\\//g')

  # Use sed to find the line with the key and replace its value
  sed -i "s|^$key=.*$|$key=$value|" "$file"
}

function config() {
  case "$1" in
    "get")
      # if empty show example usage
      if [ -z "$2" ]; then
        echo "Usage: polkacli config get [key]"
        echo "Example: polkacli config get RPC_PORT"
        exit 1
      else
        get_config_value "$2"
      fi
      ;;
    "set")
      # if empty show example usage
      if [ -z "$2" ]; then
        echo "Usage: polkacli config set [key] [value]"
        echo "Example: polkacli config set RPC_PORT 9933"
        exit 1
      else
        set_config_value "$2" "$3"
      fi
      ;;
    "print")
      cat "$POLKACLI_CONFIG"
      ;;
    *)
      echo "Usage: polkacli config [get|set|print] [key] [value]"
      return 1
      ;;
  esac
}

function setup() {
  echo "Setting up polkacli v$POLKACLI_VERSION" 

  # Print the current configuration file
  echo "Current configuration values:"
  cat "$POLKACLI_CONFIG"

  # Prompt the user to modify any configuration values
  
  read -p "Do you want to modify any configuration values? [y/N]: " modify_config

  if [[ $modify_config =~ ^[Yy]$ ]]; then
    # Use config get and set to modify the configuration file
    polkacli config get
    polkacli config set
    echo "Please run the setup script again to complete the setup."
  else
    echo "setuping polkacli v$POLKACLI_VERSION..."
    # Update the service file with the current configuration values
    

    echo "setup completed!"
  fi
}

# RPC-commands
function rpc() {
  case "$1" in
    "rotatekeys")
      curl -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "author_rotateKeys", "params":[]}' "http://localhost:$RPC_PORT" >> "$POLKACLI_PATH/sessionkeys.log"
      tail -1 "$POLKACLI_PATH/sessionkeys.log"
      ;;
    "epochauthorship")
      curl -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "babe_epochAuthorship", "params":[]}' "http://localhost:$RPC_PORT"
      ;;
    *)
      # if empty show show subcommands
      if [ -z "$1" ]; then
        echo "Usage: polkacli rpc [rotatekeys|epochauthorship]"
        exit 1
      else
        echo "Invalid command: polkacli rpc $1"
      fi
      ;;
  esac
}

# Service commands
service() {
  case "$1" in
    edit)
      $EDITOR "$SERVICE_FILE"
      ;;
    install)
      $EDITOR "$SERVICE_FILE"
      ;;
    enable|disable|start|stop|status|reload|restart)
      sudo systemctl "$@" "$NETWORK.service"
      ;;
    *)
      # if empty show show subcommands
      if [ -z "$1" ]; then
        echo "Usage: polkacli service [edit|install|enable|disable|start|stop|status|reload|restart]"
        exit 1
      else
        echo "Invalid command: polkacli service $1"
      fi
      ;;
  esac
}

# setuping polkashots (https://ksm-rocksdb.polkashots.io/)
shots() {
  case "$1" in
    download)
      wget "https://$NETWORK-rocksdb.polkashots.io/snapshot" -O "$HOME/$NETWORK.RocksDb.tar.lz4"
      ;;
    update)
      if sudo systemctl stop "$NETWORK.service"; then
        rm -rf "$BASE_PATH/chains/$NETWORK"
        mkdir -p "$BASE_PATH/chains/$NETWORK"
        lz4 -c -d "$HOME/$NETWORK.RocksDb.tar.lz4" | tar -x -C "$BASE_PATH/chains/$NETWORK"
        sudo systemctl start "$NETWORK.service"
      fi
      ;;
    delete)
      rm -v "$HOME/$NETWORK.RocksDb.tar.lz4"
      ;;
    *)
      # if empty show show subcommands
      if [ -z "$1" ]; then
        echo "Usage: polkacli shots [download|update|delete]"
        exit 1
      else
        echo "Invalid command: polkacli shots $1"
      fi
      ;;
  esac
}

# Main
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --help)
      cat "$POLKACLI_USAGE"
      exit 0
      ;;
    --version)
      cat "$POLKACLI_LOGO"
      echo "polkacli version $POLKACLI_VERSION"
      exit 0
      ;;
    *)
      break
      ;;
  esac
done

case "$1" in
  "client")
    shift
    client "$@"
    ;;
  "config")
    shift
    config "$@"
    ;;
  "setup")
    shift
    setup "$@"
    ;;
  "rpc")
    shift
    rpc "$@"
    ;;
  "service")
    shift
    service "$@"
    ;;
  "shots")
    shift
    shots "$@"
    ;;
  *)
    echo "Invalid command: $1"
    cat "$POLKACLI_USAGE"
    exit 1
    ;;
esac

exit 0
